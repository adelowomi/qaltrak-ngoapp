// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NGOAPP;

#nullable disable

namespace NGOAPP.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240607151302_AddedEventVolunteers")]
    partial class AddedEventVolunteers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claimValue");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("roleId");

                    b.HasKey("Id")
                        .HasName("pK_RoleClaims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_RoleClaims_roleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claimValue");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_UserClaims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_UserClaims_userId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("loginProvider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("providerKey");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("providerDisplayName");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pK_UserLogins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_UserLogins_userId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("roleId");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pK_UserRoles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("iX_UserRoles_roleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("loginProvider");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pK_UserTokens");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("NGOAPP.AdminSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("char(36)")
                        .HasColumnName("adminId");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<int>("NotificationIntervalInMinutes")
                        .HasColumnType("int")
                        .HasColumnName("notificationIntervalInMinutes");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pK_adminSchedules");

                    b.HasIndex("AdminId")
                        .HasDatabaseName("iX_adminSchedules_adminId");

                    b.ToTable("adminSchedules", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AltPhoneNumber1")
                        .HasColumnType("longtext")
                        .HasColumnName("altPhoneNumber1");

                    b.Property<string>("AltPhoneNumber2")
                        .HasColumnType("longtext")
                        .HasColumnName("altPhoneNumber2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Department")
                        .HasColumnType("longtext")
                        .HasColumnName("department");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<string>("Image")
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("phone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_contacts");

                    b.HasIndex("EventId")
                        .HasDatabaseName("iX_contacts_eventId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_contacts_userId");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<bool>("AttendeesCanVolunteer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("attendeesCanVolunteer");

                    b.Property<string>("CoverImage")
                        .HasColumnType("longtext")
                        .HasColumnName("coverImage");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<Guid?>("EventCategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventCategoryId");

                    b.Property<string>("EventContact")
                        .HasColumnType("longtext")
                        .HasColumnName("eventContact");

                    b.Property<decimal>("EventPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("eventPrice");

                    b.Property<int?>("EventSubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("eventSubCategoryId");

                    b.Property<Guid?>("EventTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventTypeId");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("groupId");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("images");

                    b.Property<bool?>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isPrivate");

                    b.Property<bool?>("IsPublished")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isPublished");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<int?>("NumberOfVolunteersNeeded")
                        .HasColumnType("int")
                        .HasColumnName("numberOfVolunteersNeeded");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("publishDate");

                    b.Property<string>("QuestionsForAttendees")
                        .HasColumnType("longtext")
                        .HasColumnName("questionsForAttendees");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("statusId");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("title");

                    b.Property<int?>("TotalCapacity")
                        .HasColumnType("int")
                        .HasColumnName("totalCapacity");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_events");

                    b.HasIndex("EventCategoryId")
                        .HasDatabaseName("iX_events_eventCategoryId");

                    b.HasIndex("EventSubCategoryId")
                        .HasDatabaseName("iX_events_eventSubCategoryId");

                    b.HasIndex("EventTypeId")
                        .HasDatabaseName("iX_events_eventTypeId");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("iX_events_groupId");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("iX_events_statusId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_events_userId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("NGOAPP.EventCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_eventCategories");

                    b.ToTable("eventCategories", (string)null);
                });

            modelBuilder.Entity("NGOAPP.EventSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("EventCategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventCategoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_eventSubCategories");

                    b.HasIndex("EventCategoryId")
                        .HasDatabaseName("iX_eventSubCategories_eventCategoryId");

                    b.ToTable("eventSubCategories", (string)null);
                });

            modelBuilder.Entity("NGOAPP.EventTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("endDate");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isAvailable");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsSoldOut")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("isSoldOut");

                    b.Property<int>("MaxQuantityPerOrder")
                        .HasColumnType("int")
                        .HasColumnName("maxQuantityPerOrder");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("startDate");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("tax");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ticketTypeId");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("pK_eventTickets");

                    b.HasIndex("EventId")
                        .HasDatabaseName("iX_eventTickets_eventId");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("iX_eventTickets_ticketTypeId");

                    b.ToTable("eventTickets", (string)null);
                });

            modelBuilder.Entity("NGOAPP.EventType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_eventTypes");

                    b.ToTable("eventTypes", (string)null);
                });

            modelBuilder.Entity("NGOAPP.EventVolunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_eventVolunteers");

                    b.HasIndex("EventId")
                        .HasDatabaseName("iX_eventVolunteers_eventId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_eventVolunteers_userId");

                    b.ToTable("eventVolunteers", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bio");

                    b.Property<string>("Commitment")
                        .HasColumnType("longtext")
                        .HasColumnName("commitment");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image");

                    b.Property<string>("Mission")
                        .HasColumnType("longtext")
                        .HasColumnName("mission");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("websiteUrl");

                    b.HasKey("Id")
                        .HasName("pK_groups");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_groups_userId");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("NGOAPP.GroupFollow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("groupId");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_groupFollows");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("iX_groupFollows_groupId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_groupFollows_userId");

                    b.ToTable("groupFollows", (string)null);
                });

            modelBuilder.Entity("NGOAPP.GroupUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("groupId");

                    b.Property<string>("Role")
                        .HasColumnType("longtext")
                        .HasColumnName("role");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_groupUsers");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("iX_groupUsers_groupId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_groupUsers_userId");

                    b.ToTable("groupUsers", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("addressLine");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<double>("Latitude")
                        .HasColumnType("double")
                        .HasColumnName("latitude");

                    b.Property<int?>("LocationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("locationTypeId");

                    b.Property<string>("LocationUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("locationUrl");

                    b.Property<double>("Longitude")
                        .HasColumnType("double")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("tags");

                    b.HasKey("Id")
                        .HasName("pK_locations");

                    b.HasIndex("EventId")
                        .HasDatabaseName("iX_locations_eventId");

                    b.HasIndex("LocationTypeId")
                        .HasDatabaseName("iX_locations_locationTypeId");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("NGOAPP.LocationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_locationTypes");

                    b.ToTable("locationTypes", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("locationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid?>("SpeakerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("speakerId");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("url");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_medias");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("iX_medias_locationId");

                    b.HasIndex("SpeakerId")
                        .HasDatabaseName("iX_medias_speakerId");

                    b.ToTable("medias", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Models.AppModels.Code", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CodeString")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("codeString");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Placeholder")
                        .HasColumnType("longtext")
                        .HasColumnName("placeholder");

                    b.HasKey("Id")
                        .HasName("pK_codes");

                    b.ToTable("codes", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Models.IdentityModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedName");

                    b.HasKey("Id")
                        .HasName("pK_Roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Models.IdentityModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("accessFailedCount");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("longtext")
                        .HasColumnName("addressLine1");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext")
                        .HasColumnName("addressLine2");

                    b.Property<string>("Bio")
                        .HasColumnType("longtext")
                        .HasColumnName("bio");

                    b.Property<string>("City")
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasColumnName("concurrencyStamp");

                    b.Property<string>("Country")
                        .HasColumnType("longtext")
                        .HasColumnName("country");

                    b.Property<string>("Department")
                        .HasColumnType("longtext")
                        .HasColumnName("department");

                    b.Property<string>("DeviceId")
                        .HasColumnType("longtext")
                        .HasColumnName("deviceId");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("emailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("firstName");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext")
                        .HasColumnName("gender");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("imageUrl");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("lastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedEmail");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("normalizedUserName");

                    b.Property<string>("OtherNames")
                        .HasColumnType("longtext")
                        .HasColumnName("otherNames");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("passwordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phoneNumberConfirmed");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext")
                        .HasColumnName("postalCode");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("securityStamp");

                    b.Property<string>("StateOrProvince")
                        .HasColumnType("longtext")
                        .HasColumnName("stateOrProvince");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("twoFactorEnabled");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("userName");

                    b.HasKey("Id")
                        .HasName("pK_Users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_schedules");

                    b.HasIndex("EventId")
                        .HasDatabaseName("iX_schedules_eventId");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("DurationTime")
                        .HasColumnType("int")
                        .HasColumnName("durationTime");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("locationId");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("scheduleId");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start");

                    b.Property<string>("Topic")
                        .HasColumnType("longtext")
                        .HasColumnName("topic");

                    b.Property<string>("YoutubeLink")
                        .HasColumnType("longtext")
                        .HasColumnName("youtubeLink");

                    b.Property<string>("YoutubeLiveLink")
                        .HasColumnType("longtext")
                        .HasColumnName("youtubeLiveLink");

                    b.HasKey("Id")
                        .HasName("pK_sessions");

                    b.HasIndex("EventId")
                        .HasDatabaseName("iX_sessions_eventId");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("iX_sessions_scheduleId");

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Speaker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bio");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_speakers");

                    b.ToTable("speakers", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_statuses");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("NGOAPP.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventId");

                    b.Property<Guid?>("EventTicketId")
                        .HasColumnType("char(36)")
                        .HasColumnName("eventTicketId");

                    b.Property<bool>("Free")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("free");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int?>("TicketTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ticketTypeId");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("pK_tickets");

                    b.HasIndex("EventId")
                        .HasDatabaseName("iX_tickets_eventId");

                    b.HasIndex("EventTicketId")
                        .HasDatabaseName("iX_tickets_eventTicketId");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("iX_tickets_ticketTypeId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("iX_tickets_userId");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("NGOAPP.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateCreated");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dateModified");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pK_ticketTypes");

                    b.ToTable("ticketTypes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("applicationType");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("clientId");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("longtext")
                        .HasColumnName("clientSecret");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("clientType");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("consentType");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("displayName");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("longtext")
                        .HasColumnName("displayNames");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("longtext")
                        .HasColumnName("jsonWebKeySet");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext")
                        .HasColumnName("permissions");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("longtext")
                        .HasColumnName("postLogoutRedirectUris");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("longtext")
                        .HasColumnName("redirectUris");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext")
                        .HasColumnName("requirements");

                    b.Property<string>("Settings")
                        .HasColumnType("longtext")
                        .HasColumnName("settings");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictApplications");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictApplications_clientId");

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("applicationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creationDate");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<string>("Scopes")
                        .HasColumnType("longtext")
                        .HasColumnName("scopes");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictAuthorizations");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("iX_OpenIddictAuthorizations_applicationId_status_subject_type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Descriptions")
                        .HasColumnType("longtext")
                        .HasColumnName("descriptions");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("displayName");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("longtext")
                        .HasColumnName("displayNames");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<string>("Resources")
                        .HasColumnType("longtext")
                        .HasColumnName("resources");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictScopes");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictScopes_name");

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int")
                        .HasColumnName("applicationId");

                    b.Property<int?>("AuthorizationId")
                        .HasColumnType("int")
                        .HasColumnName("authorizationId");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("concurrencyToken");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("creationDate");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expirationDate");

                    b.Property<string>("Payload")
                        .HasColumnType("longtext")
                        .HasColumnName("payload");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasColumnName("properties");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("redemptionDate");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("referenceId");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("subject");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pK_OpenIddictTokens");

                    b.HasIndex("AuthorizationId")
                        .HasDatabaseName("iX_OpenIddictTokens_authorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("iX_OpenIddictTokens_referenceId");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type")
                        .HasDatabaseName("iX_OpenIddictTokens_applicationId_status_subject_type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("SessionSpeaker", b =>
                {
                    b.Property<Guid>("SessionsId")
                        .HasColumnType("char(36)")
                        .HasColumnName("sessionsId");

                    b.Property<Guid>("SpeakersId")
                        .HasColumnType("char(36)")
                        .HasColumnName("speakersId");

                    b.HasKey("SessionsId", "SpeakersId")
                        .HasName("pK_sessionSpeaker");

                    b.HasIndex("SpeakersId")
                        .HasDatabaseName("iX_sessionSpeaker_speakersId");

                    b.ToTable("sessionSpeaker", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("NGOAPP.Models.IdentityModels.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_RoleClaims_Roles_roleId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NGOAPP.Models.IdentityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserClaims_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NGOAPP.Models.IdentityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserLogins_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("NGOAPP.Models.IdentityModels.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserRoles_Roles_roleId");

                    b.HasOne("NGOAPP.Models.IdentityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserRoles_Users_userId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NGOAPP.Models.IdentityModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_UserTokens_Users_userId");
                });

            modelBuilder.Entity("NGOAPP.AdminSchedule", b =>
                {
                    b.HasOne("NGOAPP.Models.IdentityModels.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_adminSchedules_users_adminId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("NGOAPP.Contact", b =>
                {
                    b.HasOne("NGOAPP.Event", "Event")
                        .WithMany("Contacts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_contacts_events_eventId");

                    b.HasOne("NGOAPP.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_contacts_users_userId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NGOAPP.Event", b =>
                {
                    b.HasOne("NGOAPP.EventCategory", "EventCategory")
                        .WithMany()
                        .HasForeignKey("EventCategoryId")
                        .HasConstraintName("fK_events_eventCategories_eventCategoryId");

                    b.HasOne("NGOAPP.EventSubCategory", "EventSubCategory")
                        .WithMany()
                        .HasForeignKey("EventSubCategoryId")
                        .HasConstraintName("fK_events_eventSubCategories_eventSubCategoryId");

                    b.HasOne("NGOAPP.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("fK_events_eventTypes_eventTypeId");

                    b.HasOne("NGOAPP.Group", "Group")
                        .WithMany("Events")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fK_events_groups_groupId");

                    b.HasOne("NGOAPP.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fK_events_statuses_statusId");

                    b.HasOne("NGOAPP.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_events_users_userId");

                    b.Navigation("EventCategory");

                    b.Navigation("EventSubCategory");

                    b.Navigation("EventType");

                    b.Navigation("Group");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NGOAPP.EventSubCategory", b =>
                {
                    b.HasOne("NGOAPP.EventCategory", "EventCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_eventSubCategories_eventCategories_eventCategoryId");

                    b.Navigation("EventCategory");
                });

            modelBuilder.Entity("NGOAPP.EventTicket", b =>
                {
                    b.HasOne("NGOAPP.Event", "Event")
                        .WithMany("EventTicket")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_eventTickets_events_eventId");

                    b.HasOne("NGOAPP.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_eventTickets_ticketTypes_ticketTypeId");

                    b.Navigation("Event");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("NGOAPP.EventVolunteer", b =>
                {
                    b.HasOne("NGOAPP.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_eventVolunteers_events_eventId");

                    b.HasOne("NGOAPP.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_eventVolunteers_users_userId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NGOAPP.Group", b =>
                {
                    b.HasOne("NGOAPP.Models.IdentityModels.User", "CreatedBy")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_groups_users_userId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("NGOAPP.GroupFollow", b =>
                {
                    b.HasOne("NGOAPP.Group", "Group")
                        .WithMany("Followers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_groupFollows_groups_groupId");

                    b.HasOne("NGOAPP.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_groupFollows_users_userId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NGOAPP.GroupUser", b =>
                {
                    b.HasOne("NGOAPP.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_groupUsers_groups_groupId");

                    b.HasOne("NGOAPP.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_groupUsers_users_userId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NGOAPP.Location", b =>
                {
                    b.HasOne("NGOAPP.Event", null)
                        .WithMany("Locations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_locations_events_eventId");

                    b.HasOne("NGOAPP.LocationType", "Type")
                        .WithMany()
                        .HasForeignKey("LocationTypeId")
                        .HasConstraintName("fK_locations_locationTypes_locationTypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("NGOAPP.Media", b =>
                {
                    b.HasOne("NGOAPP.Location", null)
                        .WithMany("Images")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fK_medias_locations_locationId");

                    b.HasOne("NGOAPP.Speaker", null)
                        .WithMany("Images")
                        .HasForeignKey("SpeakerId")
                        .HasConstraintName("fK_medias_speakers_speakerId");
                });

            modelBuilder.Entity("NGOAPP.Schedule", b =>
                {
                    b.HasOne("NGOAPP.Event", null)
                        .WithMany("Schedules")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_schedules_events_eventId");
                });

            modelBuilder.Entity("NGOAPP.Session", b =>
                {
                    b.HasOne("NGOAPP.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_sessions_events_eventId");

                    b.HasOne("NGOAPP.Schedule", "Schedule")
                        .WithMany("Sessions")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_sessions_schedules_scheduleId");

                    b.Navigation("Event");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("NGOAPP.Ticket", b =>
                {
                    b.HasOne("NGOAPP.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .HasConstraintName("fK_tickets_events_eventId");

                    b.HasOne("NGOAPP.EventTicket", "EventTicket")
                        .WithMany()
                        .HasForeignKey("EventTicketId")
                        .HasConstraintName("fK_tickets_eventTickets_eventTicketId");

                    b.HasOne("NGOAPP.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("fK_tickets_ticketTypes_ticketTypeId");

                    b.HasOne("NGOAPP.Models.IdentityModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fK_tickets_users_userId");

                    b.Navigation("Event");

                    b.Navigation("EventTicket");

                    b.Navigation("TicketType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fK_OpenIddictAuthorizations_OpenIddictApplications_applicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<int>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId")
                        .HasConstraintName("fK_OpenIddictTokens_OpenIddictApplications_applicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId")
                        .HasConstraintName("fK_OpenIddictTokens_OpenIddictAuthorizations_authorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("SessionSpeaker", b =>
                {
                    b.HasOne("NGOAPP.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_sessionSpeaker_sessions_sessionsId");

                    b.HasOne("NGOAPP.Speaker", null)
                        .WithMany()
                        .HasForeignKey("SpeakersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_sessionSpeaker_speakers_speakersId");
                });

            modelBuilder.Entity("NGOAPP.Event", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("EventTicket");

                    b.Navigation("Locations");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("NGOAPP.EventCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("NGOAPP.Group", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Followers");

                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("NGOAPP.Location", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("NGOAPP.Models.IdentityModels.User", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("NGOAPP.Schedule", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("NGOAPP.Speaker", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
